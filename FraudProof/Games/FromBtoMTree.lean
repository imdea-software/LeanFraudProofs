import FraudProof.Games.GameDef -- Players, Winner

import FraudProof.DataStructures.BTree -- Btree
import FraudProof.DataStructures.MTree -- MTree
import FraudProof.DataStructures.Hash -- hash classes

import FraudProof.Games.GenericTree -- Generic Game

----------------------------------------
-- * BTree as hashes.
-- We know the structure of the data plus the hashes of their leaves.
structure ComputationTree (Œ± ‚Ñç : Type) where
  computation : BTree Œ± -- Btree in this case, in can be generalized
  res : ‚Ñç
  -- {ùî∏}, fold ùî∏_hash computation = res
  -- one binary operation and leafs (In this case, that's why BTree)
----------------------------------------

@[simp]
def data_challenge_game{Œ± ‚Ñç : Type}
    [BEq ‚Ñç][o : Hash Œ± ‚Ñç][m : HashMagma ‚Ñç]
    (da : ComputationTree Unit ‚Ñç)
    --
    (reveler : ABTree (Option Œ±) (Option (‚Ñç √ó ‚Ñç)) )
    (chooser : ABTree Unit (‚Ñç √ó ‚Ñç √ó ‚Ñç -> Option ChooserMoves))
    --
    : Winner :=
    @treeCompArbGame Unit Œ± Unit ‚Ñç
      -- Leaf winning condition
      (fun _ha data res =>
           -- (data == ha) ‚àß
           (o.mhash data == res))
      -- Node winning condition
      (fun _ r hl hr =>  m.comb hl hr == r)
      -- DA
      ‚ü® da.computation , da.res ‚ü©
      -- Revelear Strategy
      reveler
      -- Chooser Strategy
      (ABTree.map
        (fun _ => ())
        (fun fhs ‚ü®hrs , hl , hr ‚ü© => fhs ‚ü® hrs, hl , hr ‚ü©)
        chooser)

@[simp]
def treeArbitrationGame {Œ± ‚Ñç : Type}
    [BEq ‚Ñç][o : Hash Œ± ‚Ñç][m : HashMagma ‚Ñç]
    (da : ComputationTree ‚Ñç ‚Ñç)
    --
    (reveler : ABTree (Option Œ±) (Option (‚Ñç √ó ‚Ñç)) )
    (chooser : ABTree Unit (‚Ñç √ó ‚Ñç √ó ‚Ñç -> Option ChooserMoves))
    --
    : Winner :=
    @treeCompArbGame ‚Ñç Œ± Unit ‚Ñç
      -- Leaf winning condition
      (fun ha data res => (o.mhash data == ha) ‚àß (ha == res))
      -- Node winning condition
      (fun _ r hl hr =>  m.comb hl hr == r)
      -- DA
      ‚ü® da.computation , da.res ‚ü©
      -- Revelear Strategy
      reveler
      -- Chooser Strategy
      (ABTree.map
        (fun _ => ())
        (fun fhs ‚ü®hrs , hl , hr ‚ü© => fhs ‚ü® hrs, hl , hr ‚ü©)
        chooser)
----------------------------------------

@[simp]
def arbitrationTree {Œ± ‚Ñç : Type}
    [BEq ‚Ñç][o : Hash Œ± ‚Ñç][m : HashMagma ‚Ñç]
    (arena : ABTree Unit Unit)
    (res : ‚Ñç)
    --
    (reveler : ABTree (Option Œ±) (Option (‚Ñç√ó‚Ñç)) )
    (chooser : ABTree Unit (‚Ñç √ó ‚Ñç √ó ‚Ñç -> Option ChooserMoves))
    --
    : Winner :=
    @treeCompArbGame Unit Œ± Unit ‚Ñç
      -- Leaf winning condition
      (fun _ a hres => o.mhash a == hres)
      -- Node winning condition
      (fun _ r hl hr =>  m.comb hl hr == r)
      -- DA
      ‚ü® arena , res ‚ü©
      -- Revelear Strategy
      reveler
      -- Chooser Strategy
      (ABTree.map (fun _ => ()) (fun fhs ‚ü®hrs , hl , hr ‚ü© => fhs ‚ü® hrs, hl , hr ‚ü©) chooser)

