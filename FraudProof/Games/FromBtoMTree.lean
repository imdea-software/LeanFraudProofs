import FraudProof.Games.GameDef -- Players, Winner

import FraudProof.DataStructures.BTree -- Btree
import FraudProof.DataStructures.MTree -- MTree
import FraudProof.DataStructures.Hash -- hash classes

import FraudProof.Games.GenericTree -- Generic Game

----------------------------------------
-- * BTree as hashes.
-- We know the structure of the data plus the hashes of their leaves.
structure ComputationTree (Œ± ‚Ñç : Type) where
  computation : BTree Œ± -- Btree in this case, in can be generalized
  res : ‚Ñç
  -- {ùî∏}, fold ùî∏_hash computation = res
  -- one binary operation and leafs (In this case, that's why BTree)
----------------------------------------

def dac_leaf_winning_condition {Œ± ‚Ñç : Type} [BEq ‚Ñç]
  [o : Hash Œ± ‚Ñç](hc : ‚Ñç) (a : Œ±)(h : ‚Ñç) : Bool := o.mhash a == hc ‚àß h == hc

def dac_node_winning_condition {‚Ñç : Type} [BEq ‚Ñç]
  [m : HashMagma ‚Ñç] (top hl hr : ‚Ñç) : Bool := m.comb hl hr == top
@[simp]
def data_challenge_game{Œ± ‚Ñç : Type}
    [BEq ‚Ñç][o : Hash Œ± ‚Ñç][m : HashMagma ‚Ñç]
    (da : ComputationTree ‚Ñç ‚Ñç)
    --
    (reveler : ABTree (Option Œ±) (Option (‚Ñç √ó ‚Ñç)) )
    (chooser : ABTree Unit (‚Ñç √ó ‚Ñç √ó ‚Ñç -> Option ChooserMoves))
    --
    : Winner :=
    @treeCompArbGame ‚Ñç Œ± Unit ‚Ñç
      -- Leaf winning condition
      dac_leaf_winning_condition
      -- Node winning condition
      (fun _  =>  dac_node_winning_condition)
      -- DA
      ‚ü® da.computation , da.res ‚ü©
      -- Revelear Strategy
      reveler
      -- Chooser Strategy
      (ABTree.map
        (fun _ => ())
        (fun fhs ‚ü®hrs , hl , hr ‚ü© => fhs ‚ü® hrs, hl , hr ‚ü©)
        chooser)

theorem dac_winning_gen_chooser {Œ± ‚Ñç : Type}
    [hash : Hash Œ± ‚Ñç][HashMagma ‚Ñç]
    -- Hash equality depends on collision free hashes.
    [BEq ‚Ñç][LawfulBEq ‚Ñç]
    --
    -- Public Information
    (pub_data : ABTree ‚Ñç Unit)
    -- Players
    (revealer : ABTree (Option Œ±) (Option (‚Ñç √ó ‚Ñç)))(rev_res : ‚Ñç)
    (chooser : ABTree (Option Œ±) (Option (‚Ñç √ó ‚Ñç)))(ch_res : ‚Ñç)
    -- Chooser knows the data and hashes do not match
    (good_chooser: winning_condition_player
                    (fun hc a h => dac_leaf_winning_condition hc a h)
                    (fun _ (l,r) res => dac_node_winning_condition res l r)
                    (fun _ => id) ‚ü® pub_data , ch_res ‚ü© chooser)
    (hneq : ¬¨ rev_res = ch_res)
    : data_challenge_game ‚ü® pub_data , rev_res ‚ü©
         revealer (chooser.map (fun _ => ()) gen_chooser_opt)
         = Player.Chooser
    := by
    revert hneq good_chooser ch_res chooser rev_res revealer
    induction pub_data with
    | leaf v =>
      intros revealer rev_res chooser ch_res good_chooser hneq
      simp
      cases revealer with
      | node _ _ _ => simp [treeCompArbGame]
      | leaf rv =>
        cases rv with
        | none => simp [treeCompArbGame]
        | some rv =>
          simp [treeCompArbGame]
          simp at good_chooser
          cases chooser with
          | node _ _ _ => simp [winning_condition_player] at good_chooser
          | leaf mcv =>
            cases mcv with
            | none => simp [winning_condition_player] at good_chooser
            | some cv =>
              simp [winning_condition_player] at good_chooser
              unfold dac_leaf_winning_condition at *
              -- Here, we do not need collision resistant, because we use logic.
              -- I won't challenge a hash that it seems correct. Maybe the other
              -- player only knows a collisition but not the real value.
              simp at good_chooser
              conv => lhs; simp; rw [Bool.and_comm]
              simp
              intro hrev_v
              subst_eqs
              tauto
    | node v bl br HL HR =>
      intros revealer rev_res chooser ch_res good_chooser hneq
      simp
      cases revealer with
      | leaf _ => simp [treeCompArbGame]
      | node mrev rev_left rev_right =>
        cases mrev with
        | none => simp [treeCompArbGame]
        | some rev =>
         simp [treeCompArbGame]
         cases chooser with
         | leaf _ =>
           clear HL HR
           simp [winning_condition_player] at good_chooser
         | node mch ch_left ch_right =>
           simp
           cases mch with
           | none =>
             clear HL HR
             simp [winning_condition_player] at good_chooser
           | some ch =>
             simp [winning_condition_player] at good_chooser
             have gdac := good_chooser.1; simp [dac_node_winning_condition] at gdac
             simp [gen_chooser_opt]
             split
             case h_1 x heq =>
               apply Option.some.inj at heq
               rw [ite_eq_iff] at heq
               simp at heq
               cases heq
               case inl h =>
                 simp [dac_node_winning_condition]
                 subst_eqs
                 rw [h.1,h.2] at hneq
                 tauto
               case inr h =>
                 replace h := h.2
                 rw [ite_eq_iff] at h
                 simp at h

             case h_2 x heq =>
               apply Option.some.inj at heq
               rw [ite_eq_iff] at heq
               simp at heq
               simp [data_challenge_game] at HL
               apply HL
               -- Proof obligations.
               exact good_chooser.2.1
               tauto

             case h_3 x heq =>
               apply Option.some.inj at heq
               rw [ite_eq_iff] at heq
               simp at heq
               simp [data_challenge_game] at HR
               apply HR
               -- Proof obligations.
               exact good_chooser.2.2
               tauto

             case h_4 x heq =>
               clear HL HR
               simp at heq

@[simp]
def treeArbitrationGame {Œ± ‚Ñç : Type}
    [BEq ‚Ñç][o : Hash Œ± ‚Ñç][m : HashMagma ‚Ñç]
    (da : ComputationTree ‚Ñç ‚Ñç)
    --
    (reveler : ABTree (Option Œ±) (Option (‚Ñç √ó ‚Ñç)) )
    (chooser : ABTree Unit (‚Ñç √ó ‚Ñç √ó ‚Ñç -> Option ChooserMoves))
    --
    : Winner :=
    @treeCompArbGame ‚Ñç Œ± Unit ‚Ñç
      -- Leaf winning condition
      (fun ha data res => (o.mhash data == ha) ‚àß (ha == res))
      -- Node winning condition
      (fun _ r hl hr =>  m.comb hl hr == r)
      -- DA
      ‚ü® da.computation , da.res ‚ü©
      -- Revelear Strategy
      reveler
      -- Chooser Strategy
      (ABTree.map
        (fun _ => ())
        (fun fhs ‚ü®hrs , hl , hr ‚ü© => fhs ‚ü® hrs, hl , hr ‚ü©)
        chooser)
----------------------------------------

@[simp]
def arbitrationTree {Œ± ‚Ñç : Type}
    [BEq ‚Ñç][o : Hash Œ± ‚Ñç][m : HashMagma ‚Ñç]
    (arena : ABTree Unit Unit)
    (res : ‚Ñç)
    --
    (reveler : ABTree (Option Œ±) (Option (‚Ñç√ó‚Ñç)) )
    (chooser : ABTree Unit (‚Ñç √ó ‚Ñç √ó ‚Ñç -> Option ChooserMoves))
    --
    : Winner :=
    @treeCompArbGame Unit Œ± Unit ‚Ñç
      -- Leaf winning condition
      (fun _ a hres => o.mhash a == hres)
      -- Node winning condition
      (fun _ r hl hr =>  m.comb hl hr == r)
      -- DA
      ‚ü® arena , res ‚ü©
      -- Revelear Strategy
      reveler
      -- Chooser Strategy
      (ABTree.map (fun _ => ()) (fun fhs ‚ü®hrs , hl , hr ‚ü© => fhs ‚ü® hrs, hl , hr ‚ü©) chooser)

