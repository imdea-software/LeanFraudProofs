import FraudProof.Games.GameDef -- Players, Winner

import FraudProof.DataStructures.BTree -- Btree
import FraudProof.DataStructures.MTree -- MTree
import FraudProof.DataStructures.Hash -- hash classes

import FraudProof.Games.GenericTree -- Generic Game

----------------------------------------
-- * BTree as hashes.
-- We know the structure of the data plus the hashes of their leaves.
structure ComputationTree (Œ± ‚Ñç : Type) where
  computation : BTree Œ± -- Btree in this case, in can be generalized
  res : ‚Ñç
  -- {ùî∏}, fold ùî∏_hash computation = res
  -- one binary operation and leafs (In this case, that's why BTree)
----------------------------------------

def dac_leaf_winning_condition {Œ± ‚Ñç : Type} [BEq ‚Ñç]
  [o : Hash Œ± ‚Ñç](hc : ‚Ñç) (a : Œ±)(_h : ‚Ñç) : Bool := o.mhash a == hc

def dac_node_winning_condition {‚Ñç : Type} [BEq ‚Ñç]
  [m : HashMagma ‚Ñç] (top hl hr : ‚Ñç) : Bool := m.comb hl hr == top
@[simp]
def data_challenge_game{Œ± ‚Ñç : Type}
    [BEq ‚Ñç][o : Hash Œ± ‚Ñç][m : HashMagma ‚Ñç]
    (da : ComputationTree ‚Ñç ‚Ñç)
    --
    (reveler : ABTree (Option Œ±) (Option (‚Ñç √ó ‚Ñç)) )
    (chooser : ABTree Unit (‚Ñç √ó ‚Ñç √ó ‚Ñç -> Option ChooserMoves))
    --
    : Winner :=
    @treeCompArbGame ‚Ñç Œ± Unit ‚Ñç
      -- Leaf winning condition
      dac_leaf_winning_condition
      -- Node winning condition
      (fun _  =>  dac_node_winning_condition)
      -- DA
      ‚ü® da.computation , da.res ‚ü©
      -- Revelear Strategy
      reveler
      -- Chooser Strategy
      (ABTree.map
        (fun _ => ())
        (fun fhs ‚ü®hrs , hl , hr ‚ü© => fhs ‚ü® hrs, hl , hr ‚ü©)
        chooser)

def gen_chooser_opt {‚Ñç : Type}
   -- [DecidableEq ‚Ñç]
   [BEq ‚Ñç]
   (data : Option (‚Ñç √ó ‚Ñç) )
   (proposed : ‚Ñç √ó ‚Ñç √ó ‚Ñç)
   : Option ChooserMoves
   := data.map ( fun (l , r) =>
     if l == proposed.2.1 ‚àß r == proposed.2.2
     then .Now
     else if ¬¨ l == proposed.2.1
          then .Continue .Left
          else .Continue .Right
   )

theorem dac_winning_gen_chooser {Œ± ‚Ñç : Type}
    [hash : Hash Œ± ‚Ñç][HashMagma ‚Ñç]
    [BEq ‚Ñç][LawfulBEq ‚Ñç]
    -- Public Information
    (pub_data : ABTree ‚Ñç Unit)
    -- Players
    (revealer : ABTree (Option Œ±) (Option (‚Ñç √ó ‚Ñç)))(rev_res : ‚Ñç)
    (chooser : ABTree (Option Œ±) (Option (‚Ñç √ó ‚Ñç)))(ch_res : ‚Ñç)
    -- Chooser knows the data and hashes do not match
    (good_chooser: winning_condition_player
                    (fun hc a h => dac_leaf_winning_condition hc a h)
                    (fun _ (l,r) res => dac_node_winning_condition res l r)
                    (fun _ => id) ‚ü® pub_data , ch_res ‚ü© chooser)
    (hneq : ¬¨ rev_res = ch_res)
    : data_challenge_game ‚ü® pub_data , rev_res ‚ü©
         revealer (chooser.map (fun _ => ()) gen_chooser_opt)
         = Player.Chooser
    := sorry


@[simp]
def treeArbitrationGame {Œ± ‚Ñç : Type}
    [BEq ‚Ñç][o : Hash Œ± ‚Ñç][m : HashMagma ‚Ñç]
    (da : ComputationTree ‚Ñç ‚Ñç)
    --
    (reveler : ABTree (Option Œ±) (Option (‚Ñç √ó ‚Ñç)) )
    (chooser : ABTree Unit (‚Ñç √ó ‚Ñç √ó ‚Ñç -> Option ChooserMoves))
    --
    : Winner :=
    @treeCompArbGame ‚Ñç Œ± Unit ‚Ñç
      -- Leaf winning condition
      (fun ha data res => (o.mhash data == ha) ‚àß (ha == res))
      -- Node winning condition
      (fun _ r hl hr =>  m.comb hl hr == r)
      -- DA
      ‚ü® da.computation , da.res ‚ü©
      -- Revelear Strategy
      reveler
      -- Chooser Strategy
      (ABTree.map
        (fun _ => ())
        (fun fhs ‚ü®hrs , hl , hr ‚ü© => fhs ‚ü® hrs, hl , hr ‚ü©)
        chooser)
----------------------------------------

@[simp]
def arbitrationTree {Œ± ‚Ñç : Type}
    [BEq ‚Ñç][o : Hash Œ± ‚Ñç][m : HashMagma ‚Ñç]
    (arena : ABTree Unit Unit)
    (res : ‚Ñç)
    --
    (reveler : ABTree (Option Œ±) (Option (‚Ñç√ó‚Ñç)) )
    (chooser : ABTree Unit (‚Ñç √ó ‚Ñç √ó ‚Ñç -> Option ChooserMoves))
    --
    : Winner :=
    @treeCompArbGame Unit Œ± Unit ‚Ñç
      -- Leaf winning condition
      (fun _ a hres => o.mhash a == hres)
      -- Node winning condition
      (fun _ r hl hr =>  m.comb hl hr == r)
      -- DA
      ‚ü® arena , res ‚ü©
      -- Revelear Strategy
      reveler
      -- Chooser Strategy
      (ABTree.map (fun _ => ()) (fun fhs ‚ü®hrs , hl , hr ‚ü© => fhs ‚ü® hrs, hl , hr ‚ü©) chooser)

